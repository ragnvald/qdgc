#*******************************************************************
# Longitude/Latitude to Quarter Degree Grid Cell standard conversion 
# utility. Daemon. 
#
# The daemon polls a directory for a.dbf-file. It then transfers and
# converts the relevant .dbf-file.
#
# Delivered as-is. If it works - fine for you. If it fails - too bad. 
# No are given guarantees whatsoever. If you use this program for 
# illegal purposes - don't blame me.
# 
# License type is Gnu GPL. Copy, distribute and change freely. Keep
# the author in mind for crediting. Come to think of it, use this 
# reference:
#
# R. Larsen, T. Holmern, S. D. Prager, H. Maliti and E. Roskaft 
#     (2009) Using the extended quarter degree grid cell system 
#     to unify mapping and sharing of biodiversity data, African
#     Journal of Ecology. Volume 47, Issue 3 , Pages 382 - 392
#
# Author Ragnvald Larsen, Dept of Biology, NTNU (www.bio.ntnu.no)
# ragnvald(at)mindland.com
#
# Version 0.6 (13.12.2009)


import os
import shutil
import tempfile
import smtplib
import math
import string
import time
import datetime

from qdgc_lib import *
from random   import choice
from dbfpy    import dbf


sender                = 'ragnvald.larsen@dirnat.no'

path_to_watch         = 'c:\\bin\\'

folder_destination    = 'c:\\bin\\test\\'

path_web              = 'http://www.qdgc.org/lonlat2qdgc/'

now                   = datetime.datetime.now()

lonlat2qdgcversion    = 'lonlat2qdgc version 0.6 did this conversion.'

formoreinformation    = 'More information about QDGC (Quarter Degree Grid Cells) is available here: http://www.qdgc.org '

errorflag             = 0


def genRandomstring(length=8, chars=string.letters + string.digits):
    return ''.join([choice(chars) for i in range(length)])




#Overvåk folder
before = dict ([(f, None) for f in os.listdir (path_to_watch)])

while 1:
    
    time.sleep (15)
    
    the_logfile = ''
    
    currentfiles =dict ([(f, None) for f in os.listdir (path_to_watch)])

    for onefile in currentfiles:
        
        basename, extension = os.path.splitext(onefile)  
    
        # If one of the files in the list of files is a .dbf-file
        # then the party starts.
        if extension=='.dbf': 
        
            
            time_for_job = now.strftime("%Y-%m-%d %H:%M")
            
            # Create a string which will later serve as a random folder name
            randomfolder = genRandomstring(20,string.letters)
            
            # Make the random folder. This is referred to as the user folder
            os.mkdir(folder_destination+randomfolder)
            
            # Create the user in folder
            os.mkdir(folder_destination+randomfolder+'\\in')
            folder_in  = (folder_destination + randomfolder + '\\in\\')
            
            # Create the user out folder
            os.mkdir(folder_destination+'\\'+randomfolder+'\\out')
            folder_out = (folder_destination + randomfolder + '\\out\\')
            
            
            # Copy the original file to the in and out-folders
            shutil.copy (path_to_watch+ onefile, folder_in + onefile)
            shutil.move (path_to_watch+ onefile, folder_out + onefile)
            
            
            #move info-file generated by the script. Job information resides in this one.
            shutil.move (path_to_watch+ basename+'.info', folder_out + basename+'.info')
            
            #print  '\n'+ 'Data file (%s.dbf) has been moved.' % (basename)
            #print  '\n'+ 'Task file (%s.info) has been moved.' % (basename)
            
            
            #read input_file_name.info
            file_info = open(folder_out + basename+'.info', "r")
            
            # Handle user email
            the_logfile        = the_logfile +'+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +\n'
            the_logfile        = the_logfile +'+\n'
            user_email         = file_info.readline().rstrip('\n')
            the_logfile        = the_logfile + '+ Client email      : %s' % (user_email)
            the_logfile        = the_logfile +'\n'
            
            # Handle user qdgc level
            user_qdgc_level    = int(file_info.readline())
            the_logfile        = the_logfile+ '+ Client QDGC level : %s' % (user_qdgc_level)
            the_logfile        = the_logfile +'\n'
            
            # Handle user comment
            user_comment       = file_info.readline().rstrip('\n')
            the_logfile        = the_logfile+ '+ User Comments     : %s\n' % (user_comment)
            the_logfile        = the_logfile +'+\n'
            
            # Logfile document time            
            the_logfile        = the_logfile +'+ Job was submitted : %s.\n' % time_for_job
            the_logfile        = the_logfile +'+\n'
            the_logfile        = the_logfile +'+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +\n'
            
            #Close the info file
            file_info.close()
    
            
            db = dbf.Dbf(folder_out + onefile)
            
            # Convert file in folder out
            
            # Timer starts
            t1 = time.clock()            
            
            # set counter
            counter = 0
            
            for rec in db:
                #Get values for longitude and latitude - given that their names are LON and LAT
                if errorflag == 0:
                    try:
                        lon_to_calculate = rec["LON"]
                    except:
                        errorflag=1
                        the_logfile = the_logfile +'\n'+'Reading the LON-column in the.dbf-file failed.' 
                    
                    try:
                        lat_to_calculate = rec["LAT"]
                    except:
                        errorflag=1
                        the_logfile = the_logfile +'\n'+'Reading the LAT-column in the.dbf-file failed.' 
                    
                    #Set QDGC column (given that is the name) value with results of the functions above
                    try:
                        rec["QDGC"] = qdgc(lon_to_calculate,lat_to_calculate,user_qdgc_level)
                    except:
                        errorflag=1
                        the_logfile = the_logfile +'\n'+'Writing the  QDGC-column in the.dbf-file failed.' 
                
                    counter = counter+1
                    
                    #Store the data
                    rec.store()
                    
                    #Empty the record and prepare for another round
                    del rec
            
            #Yeah... the DB should be closed. Polite thing to do.
            db.close()
            
            
            
            if errorflag == 0:
                # Timer ends and then calculate the speed
                t2                       = time.clock()
                log_time                 = (t2-t1)
                log_posts                = (counter)
                log_conversionspersecond = (log_posts/log_time)
                
                the_logfile = the_logfile +'\n'+  'Conversion of %s posts done i %s seconds. \nThis is about %s conversions per second.' % (counter, log_time, int(log_conversionspersecond))
                
                # Prepare link address
                user_link_outputfile = path_web + randomfolder  + '/' +  onefile
                
                user_link_logfile = path_web + randomfolder  + '/logfile.txt'
        
                the_logfile = the_logfile +'\n'+'The link to your converted file is: %s' % user_link_outputfile
                the_logfile = the_logfile +'\n'+'The link to a log file is: %s' % user_link_logfile

            else:
                the_logfile = the_logfile +'\n'+'The process failed. Check your .dbf-file and come back later. Feel free to contact us with suggestions on how to make this service better.'

            # Send email with status and link to user            
            subject ='Conversion at %s' % time_for_job
            headers = "From: %s\r\nTo: %s\r\nSubject: %s\r\n\r\n" % (sender, [user_email], subject)
            message = the_logfile
            
            smtpObj = smtplib.SMTP('dnsrv1.dirnat.intern')
            try:
                smtpObj.sendmail(sender, [user_email], message)   
                print "Successfully sent email"
                smtpObj.quit      
            except:
                #damn!
                the_logfile = the_logfile +'\n'+'The SMTP sendmail failed.' 
    
            
            print the_logfile
            
            #Log user email, input file name and user comment in logfile
            #
            try:
                # This will create a new file or **overwrite an existing file**.
                f = open((folder_out + basename+'.log'), "w")
                try:
                    f.write(the_logfile) # Write a string to a file
                
                finally:
                    f.close()
            
            except IOError:
                pass
    
            
            
            the_logfile = ''            
            
    currentfile = ''
    
    counter = 0
